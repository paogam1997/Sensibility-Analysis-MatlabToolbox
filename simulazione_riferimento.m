% % prova nlinfit% modelfun= @(b,x)(b(1).*x.^2.*exp(-b(2).*x.^0.4));% x=[0;0.121709;0.36738;1.65884;2.19883;4.53497;7];% y=[0;2.77591;7.08377;3.41147;2.89145;0.883847;0.270607];% % beta0=[161;3];% beta=nlinfit(x,y,modelfun,beta0)% plot(x,y,'ro',linspace(0,7,50),modelfun(beta,linspace(0,7,50)),'-b'); %% dati insulindemosbioloadproject('insulindemo', 'm1');warnSettings = warning('off', 'SimBiology:DimAnalysisNotDone_MatlabFcn_Dimensionless');mealDose = sbioselect(m1, 'Name', 'Single Meal');get(mealDose);configset = getconfigset(m1,'active');configset.StopTime = 8;configset.TimeUnits;normalMealSim = sbiosimulate(m1, configset, [], mealDose);diabeticVar = sbioselect(m1, 'Name', 'Type 2 diabetic');diabeticMealSim = sbiosimulate(m1, configset, diabeticVar, mealDose);outputNames = {'Plasma Glu Conc', 'Plasma Ins Conc', 'Glu Prod', ...    'Glu Appear Rate', 'Glu Util', 'Ins Secr'};log_var=[]; random=[20;50;0;0;0;0];figure; for i = 1:numel(outputNames)    subplot(2, 3, i);    [tNormal, yNormal  ]  = normalMealSim.selectbyname(outputNames{i});    [tDiabetic, yDiabetic]  = diabeticMealSim.selectbyname(outputNames{i});    log_var.tNormal(:,:,i)=tNormal;    log_var.yNormal(:,:,i)=yNormal;%+random(i)*rand(505,1);    log_var.tDiabetic(:,:,i)=tDiabetic;    log_var.yDiabetic(:,:,i)=yDiabetic;%+random(i)*rand(502,1);    plot( tNormal    , yNormal   , '-'       , ...           tDiabetic  , yDiabetic , '--'      );      % Annotate figures     outputParam = sbioselect(m1, 'Name', outputNames{i});      title(outputNames{i});    xlabel('time (hour)');    if strcmp(outputParam.Type, 'parameter')        ylabel(outputParam.ValueUnits);    else        ylabel(outputParam.InitialAmountUnits);    end    xlim([0 8]);        % Add legend    if i == 3        legend({'Normal', 'Diabetic'}, 'Location', 'Best');    end    endG_data=log_var.yNormal(:,:,1); % [mg/dl]I_data=log_var.yNormal(:,:,2)/6.027; % [pmol/l] scalato per averlo in microU/ml usate in nostro modelloG_prod_data=log_var.yNormal(:,:,3); % [mg/(dl*min)]Ra_data=log_var.yNormal(:,:,4); % [mg/(dl*min)]G_util_data=log_var.yNormal(:,:,5); % [mg/(dl*min)]I_secr_data=log_var.yNormal(:,:,6);% [pmol/(l*min)]time_data=log_var.tNormal(:,:,1)*60; % [min]% G_data=log_var.yDiabetic(:,:,1);% I_data=log_var.yDiabetic(:,:,2)/6.027; % [pmol/l] scalato per averlo in microU/ml usate in nostro modello% G_prod_data=log_var.yDiabetic(:,:,3);% Ra_data=log_var.yDiabetic(:,:,4);% G_util_data=log_var.yDiabetic(:,:,5);% I_secr_data=log_var.yDiabetic(:,:,6);% time_data=log_var.tDiabetic(:,:,1)*60;save('dati.mat',"G_data","I_data","G_prod_data","Ra_data","G_util_data","I_secr_data","time_data");%% prova fit% modelfun= @(b,x)(b(1).*x.^2.*exp(-b(2).*x.^1));% x=log_var.tNormal(:,:,4);% y=log_var.yNormal(:,:,4);% % beta0=[1;1];% beta=nlinfit(x,y,modelfun,beta0)% plot(x,y,'r+',linspace(0,8,500),modelfun(beta,linspace(0,8,500)),'-b')% legend('dati','modello')% % %% x=log_var.tNormal(:,:,4);% y=log_var.yNormal(:,:,4);% f=fit(x,y,'smoothingspline')% disp(f.p)% figure% subplot(2,1,1)% plot(x,y,'+',x,f(x),'-',x,modelfun(beta,x));% subplot(2,1,2)% plot(x,f(x)-modelfun(beta,x)); title('errore con modello scelto')